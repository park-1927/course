{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1y5f1hTyx6QD_ICCxtqUDIjegg8XJdprH","authorship_tag":"ABX9TyP3i6QVV9g0iJgBCgQJakWA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["#[이미지의 이진화란](https://)\n","- 이미지를 [흑과백으로 나누는 것을](https://) 뜻하고, 흑과백으로 나눌때 우리가 원하는 기준치(임계값)을 설정해서, 임계값보다 크면 백으로 작으면 흑으로 표현"],"metadata":{"id":"8uvcIBMq1q8t"}},{"cell_type":"code","source":["#image_binary.py\n","import cv2 # OpenCV API\n","import matplotlib as plt\n","image = cv2.imread('/content/drive/MyDrive/드론코딩/드론코딩-7-파이썬에서 OpenCV를 활용한 이미지 처리 기초/apple.jpg', cv2.IMREAD_GRAYSCALE) # 이미지 파일 그레이 스케일로 불러오기\n","#plt.imshow(image, img)\n","plt.imshow(image, cmap = 'gray') # 이미지 시각화\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":331},"id":"bbCVoLMj6UPo","executionInfo":{"status":"error","timestamp":1739183979732,"user_tz":-540,"elapsed":3571,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"d8dfca0c-c8be-41b6-bbf2-13ae35c6893d","collapsed":true},"execution_count":1,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"module 'matplotlib' has no attribute 'imshow'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-fff6ba6f5a34>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/드론코딩/드론코딩-7-파이썬에서 OpenCV를 활용한 이미지 처리 기초/apple.jpg'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIMREAD_GRAYSCALE\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# 이미지 파일 그레이 스케일로 불러오기\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#plt.imshow(image, img)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'gray'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# 이미지 시각화\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/_api/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minstance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 218\u001b[0;31m         raise AttributeError(\n\u001b[0m\u001b[1;32m    219\u001b[0m             f\"module {cls.__module__!r} has no attribute {name!r}\")\n\u001b[1;32m    220\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'matplotlib' has no attribute 'imshow'"]}]},{"cell_type":"code","source":["import cv2\n","import numpy as np\n","from matplotlib import pyplot as plt\n","\n","img = cv2.imread('lenna_image.jpg',0)\n","\n","ret, thresh1 = cv2.threshold(img,127,255, cv2.THRESH_BINARY)\n","ret, thresh2 = cv2.threshold(img,127,255, cv2.THRESH_BINARY_INV)\n","ret, thresh3 = cv2.threshold(img,127,255, cv2.THRESH_TRUNC)\n","ret, thresh4 = cv2.threshold(img,127,255, cv2.THRESH_TOZERO)\n","ret, thresh5 = cv2.threshold(img,127,255, cv2.THRESH_TOZERO_INV)\n","\n","titles =['Original','BINARY','BINARY_INV','TRUNC','TOZERO','TOZERO_INV']\n","images = [img,thresh1,thresh2,thresh3,thresh4,thresh5]\n","\n","for i in xrange(6):\n","\tplt.subplot(2,3,i+1),plt.imshow(images[i],'gray')\n","\tplt.title(titles[i])\n","\tplt.xticks([]),plt.yticks([])\n","\n","plt.show()"],"metadata":{"id":"jAEHmvpVdu45"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"ELpp06fse13o"}},{"cell_type":"markdown","source":["#[이미지 라벨링](https://)\n","- 컴퓨터 비전(CV) 분야에서 핵심적인 과정 중 하나로 데이터 라벨링 작업자가 [태그나 메타데이터를 사용하여 AI 모델이 학습하는 데이터 특징을 표시하는 과정을 의미](https://)\n",">- 어노테이션 된 데이터는 새로운 이미지의 데이터를 처리할 때 모델이 해당 특징을 인식하도록 학습되는 데 활용\n",">>- 이미지 어노테이션은 컴퓨터가 이해할 수 있는 형태로 제공\n",">- 이미지 데이터에 대한 활용은 점차 증가하고 있어 이미지 라벨링에 대한 수요가 급증하고 있음\n"],"metadata":{"id":"elNo6IWAe22x"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"A3kZlQp6geqT"}},{"cell_type":"markdown","source":["#[유형](https://)\n","- 이미지 라벨링에는 세 가지 일반적인 유형이 있으며, 어떤 유형이든 이미지 데이터의 품질이 높을수록 AI 예측 결과가 더욱 정확해지는 경향이 있음\n","##[1. 이미지 분류(Classification)](https://)\n","- 라벨을 이미지에 간단하게 적용하는 빠르고 간편한 어노테이션 방법\n",">- 예를 들어, 식료품점 선반의 일련의 이미지를 정렬하여 탄산음료가 있는 선반과 없는 선반을 식별할 수 있음\n",">- 분류는 높은 수준의 레이블을 제공하지만, 개체의 정확한 위치를 나타내지 않아 상대적으로 모호함\n","##[2. 객체 감지(Object Detection)](https://)\n","- 라벨링 작업자가 이미지 내 특정 객체에 어노테이션을 달 수 있는 방법\n",">- 2D 경계 상자(2D Bounding Box) : 직사각형과 정사각형을 사용하여 대상 객체의 위치를 ​​정의하는 방법으로 이미지 라벨링에서 가장 일반적으로 사용되는 기술 중 하나\n",">- 3D 직육면체(Cuboid) 또는 3D 경계 상자(3D Bounding Box) : 대상 객체에 큐브를 적용하여 객체의 위치와 깊이를 정의\n",">- 다각형 분할(Polygonal Segmentation) : 대상 객체가 비대칭이고 상자에 쉽게 들어갈 수 없는 경우에 사용되며 복잡한 다각형을 사용하여 객체의 위치를 ​​정의\n",">- 선 및 스플라인(Lines and Splines) : 이미지의 주요 경계선과 곡선을 식별하여 영역을 구분\n",">>- 예를 들어, 자율 주행 자동차 이미지 라벨링을 위해 고속도로의 개별 차선에 라벨을 지정할 수 있음\n","- 객체 감지는 객체의 일반적인 위치를 제공하고 정확도가 높지 않을 수 있지만, 빠른 라벨링 작업이 가능함\n","##[3. 의미론적 분할(Semantic Segmentation)](https://)\n","- 의미론적 분할은 이미지의 각 픽셀을 특정 카테고리에 할당하여 객체 감지의 중복 문제를 해결함\n","- 각 픽셀에 대상 클래스(예: 보행자, 자동차, 표지판)를 할당하여 영역을 분류함\n",">- 이 방법은 객체의 가려진 부분도 인식할 수 있어 모델에 더 정확한 학습을 가능케 함"],"metadata":{"id":"7JYOB_FzfmFj"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"InTi2bYQgfzo"}},{"cell_type":"code","source":["#https://jimmy-ai.tistory.com/323\n","from IPython.display import Image, display\n","\n","path = \"/content/drive/MyDrive/드론코딩/드론코딩-7-파이썬에서 OpenCV를 활용한 이미지 처리 기초/dog_cat_image.jpg\" # 사진 파일의 디렉토리\n","display(Image(filename = path))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":230},"id":"fehjTb3zifUR","executionInfo":{"status":"ok","timestamp":1739185612222,"user_tz":-540,"elapsed":3188,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"30762600-2ec9-4e7d-bf3d-b3c1dd94d233"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"image/jpeg":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{}}]},{"cell_type":"code","source":["!pip install cvlib\n","!pip install tensorflow\n","import cv2\n","import cvlib as cv # cvlib 미설치 시 !pip install cvlib으로 설치 진행\n","\n","img = cv2.imread(path) # 이미지 파일 불러오기\n","conf = 0.5 # 사물 인식을 진행할 confidence의 역치 값\n","model_name = \"yolov3\" # 사물을 인식할 모델 이름\n","\n","result = cv.detect_common_objects(img, confidence=conf, model=model_name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"collapsed":true,"id":"AmTbPF60iqNP","executionInfo":{"status":"error","timestamp":1739185838777,"user_tz":-540,"elapsed":33094,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"83b79673-64a2-4d6d-daaa-0f6b2f584ffc"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: cvlib in /usr/local/lib/python3.11/dist-packages (0.2.7)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from cvlib) (1.26.4)\n","Requirement already satisfied: progressbar in /usr/local/lib/python3.11/dist-packages (from cvlib) (2.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from cvlib) (2.32.3)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.11/dist-packages (from cvlib) (11.1.0)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.11/dist-packages (from cvlib) (2.37.0)\n","Requirement already satisfied: imutils in /usr/local/lib/python3.11/dist-packages (from cvlib) (0.5.4)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->cvlib) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->cvlib) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->cvlib) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->cvlib) (2025.1.31)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.18.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.1.24)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.25.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.1.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.5.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.12.2)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.70.0)\n","Requirement already satisfied: tensorboard<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.18.0)\n","Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.8.0)\n","Requirement already satisfied: numpy<2.1.0,>=1.26.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.26.4)\n","Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.12.1)\n","Requirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n","Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n","Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.0.8)\n","Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.14.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2025.1.31)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.7)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.1.3)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow) (3.0.2)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n","Downloading yolov3.weights from https://pjreddie.com/media/files/yolov3.weights\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Downloading yolov3_classes.txt from https://github.com/arunponnusamy/object-detection-opencv/raw/master/yolov3.txt\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"error","ename":"error","evalue":"OpenCV(4.11.0) /io/opencv/modules/dnn/src/darknet/darknet_io.cpp:250: error: (-212:Parsing error) Unsupported activation: le in function 'setActivation'\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-ac6fdf15c9f7>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mmodel_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"yolov3\"\u001b[0m \u001b[0;31m# 사물을 인식할 모델 이름\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetect_common_objects\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfidence\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cvlib/object_detection.py\u001b[0m in \u001b[0;36mdetect_common_objects\u001b[0;34m(image, confidence, nms_thresh, model, enable_gpu)\u001b[0m\n\u001b[1;32m    123\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0minitialize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m         \u001b[0mclasses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpopulate_class_labels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m         \u001b[0mnet\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadNet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweights_file_abs_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig_file_abs_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m         \u001b[0minitialize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31merror\u001b[0m: OpenCV(4.11.0) /io/opencv/modules/dnn/src/darknet/darknet_io.cpp:250: error: (-212:Parsing error) Unsupported activation: le in function 'setActivation'\n"]}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"w8H5Ae93joKS"}},{"cell_type":"code","source":["# CVlib\n","!pip install cvlib\n","\n","# tensorflow\n","!pip install tensorflow"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"oVtUVi1yjqn4","executionInfo":{"status":"ok","timestamp":1739185899603,"user_tz":-540,"elapsed":5489,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"c138558e-e948-4c4f-bb2d-579a7864b685"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: cvlib in /usr/local/lib/python3.11/dist-packages (0.2.7)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from cvlib) (1.26.4)\n","Requirement already satisfied: progressbar in /usr/local/lib/python3.11/dist-packages (from cvlib) (2.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from cvlib) (2.32.3)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.11/dist-packages (from cvlib) (11.1.0)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.11/dist-packages (from cvlib) (2.37.0)\n","Requirement already satisfied: imutils in /usr/local/lib/python3.11/dist-packages (from cvlib) (0.5.4)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->cvlib) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->cvlib) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->cvlib) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->cvlib) (2025.1.31)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.18.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.1.24)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.25.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.1.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.5.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.12.2)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.70.0)\n","Requirement already satisfied: tensorboard<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.18.0)\n","Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.8.0)\n","Requirement already satisfied: numpy<2.1.0,>=1.26.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.26.4)\n","Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.12.1)\n","Requirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n","Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n","Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.0.8)\n","Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.14.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2025.1.31)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.7)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.1.3)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow) (3.0.2)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n"]}]},{"cell_type":"code","source":["import cv2\n","import matplotlib.pyplot as plt\n","import cvlib as cv\n","from cvlib.object_detection import draw_bbox\n","import numpy as np"],"metadata":{"id":"9rU6XEdqju6l","executionInfo":{"status":"ok","timestamp":1739185912462,"user_tz":-540,"elapsed":4,"user":{"displayName":"박인철","userId":"06375623913430966996"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["#15inch x 15inch figure 생성\n","fig = plt.figure(figsize=(15,15))\n","for i in range(1, 4):\n","    # image_path에서 이미지 읽어오기\n","    image_path = '/content/drive/MyDrive/드론코딩/드론코딩-7-파이썬에서 OpenCV를 활용한 이미지 처리 기초/dog_cat_image.jpg'+ str(i) +'.jpeg'\n","    im = cv2.imread(image_path)\n","\n","    # object detection 수행\n","    # bbox : detect한 부분, label : 물체를 detect한 라벨, conf : label로 분류된 확률\n","    bbox, label, conf = cv.detect_common_objects(im)\n","\n","    # 결과 이미지에 detect한 부분을 네모로 표시하고 라벨 붙이기\n","    output_image = draw_bbox(im, bbox, label, conf)\n","    # BGR -> RGB\n","    output_image = cv2.cvtColor(output_image, cv2.COLOR_BGR2RGB)\n","\n","    # figure를 3x1 그리드 나누고 i번째 좌표계에 이미지 표시하기\n","    plt.subplot(3, 1, i)\n","    plt.imshow(output_image)\n","    # 좌표축 삭제\n","    plt.axis('off')\n","\n","# padding 등 subplot layout 자동 조정\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"3qlKaXkmjxux","executionInfo":{"status":"error","timestamp":1739185944507,"user_tz":-540,"elapsed":836,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"55b88bc7-15f3-46fe-be10-a1adbf44a7e8"},"execution_count":9,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'NoneType' object has no attribute 'shape'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-02e8985af68a>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;31m# object detection 수행\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;31m# bbox : detect한 부분, label : 물체를 detect한 라벨, conf : label로 분류된 확률\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0mbbox\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetect_common_objects\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;31m# 결과 이미지에 detect한 부분을 네모로 표시하고 라벨 붙이기\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/cvlib/object_detection.py\u001b[0m in \u001b[0;36mdetect_common_objects\u001b[0;34m(image, confidence, nms_thresh, model, enable_gpu)\u001b[0m\n\u001b[1;32m     75\u001b[0m     \"\"\"\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m     \u001b[0mHeight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mWidth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m     \u001b[0mscale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.00392\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'shape'"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1500 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"7mWJqmBekGUu"}},{"cell_type":"markdown","source":["#<<<참조자료 사이트>>>\n","1.[이미지 라벨링이란? 정의, 유형, 빠르게 라벨링 하는 법](https://kr.appen.com/blog/image-annotation/)  \n","2.[영상의 이진화](https://m.blog.naver.com/sees111/222384421797)  \n","3.[이미지 임계처리](https://opencv-python.readthedocs.io/en/latest/doc/09.imageThresholding/imageThresholding.html)  \n","4.[파이썬 사물 인식(Object Detection) 실습 코드 예제](https://jimmy-ai.tistory.com/323)  \n","5.[이미지 분석 활용 맛보기](https://dsc-sookmyung.tistory.com/27)  \n","6.[왕초보도 가능한 이미지 영역 분리하기 (python, pytorch)](https://codequeen.tistory.com/entry/%EC%8B%9C%EB%A7%A8%ED%8B%B1-%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98-%EC%99%95%EC%B4%88%EB%B3%B4%EB%8F%84-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%98%81%EC%97%AD-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0-python-pytorch)  \n","7.[[5주차] 이미지 라벨링 해보기 & 학습 시키기](https://www.google.com/search?q=5%EC%A3%BC%EC%B0%A8+%EC%9D%B4%EB%AF%B8%EC%A7%80+%EB%9D%BC%EB%B2%A8%EB%A7%81+%ED%95%B4%EB%B3%B4%EA%B8%B0&sca_esv=1c09ea08d4217e64&source=hp&ei=od-pZ6SkA4Kk2roP4fj6sAQ&iflsig=ACkRmUkAAAAAZ6ntsYlZd50iuXdr0K9dQcSM_y22eC-l&ved=0ahUKEwjk-LyE_biLAxUCklYBHWG8HkYQ4dUDCBk&uact=5&oq=5%EC%A3%BC%EC%B0%A8+%EC%9D%B4%EB%AF%B8%EC%A7%80+%EB%9D%BC%EB%B2%A8%EB%A7%81+%ED%95%B4%EB%B3%B4%EA%B8%B0&gs_lp=Egdnd3Mtd2l6IiU17KO87LCoIOydtOuvuOyngCDrnbzrsqjrp4Eg7ZW067O06riwMggQABiABBiiBDIIEAAYgAQYogQyCBAAGIAEGKIEMgUQABjvBTIIEAAYgAQYogRIj0FQvw1Y6z5wB3gAkAEDmAGuAaAB7huqAQQwLjI4uAEDyAEA-AEBmAIcoALxFqgCAMICCxAAGIAEGLEDGIMBwgIIEAAYgAQYsQPCAgUQABiABMICBhAAGAgYHsICBRAhGKABwgIHECEYoAEYCpgDAfEF1hIwX_aifjeSBwQ2LjIyoAebag&sclient=gws-wiz)\n"],"metadata":{"id":"HXPfABOvcrLB"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"bL6Q0UC-cpb4"}}]}