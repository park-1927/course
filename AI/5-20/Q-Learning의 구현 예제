{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOf6frFTXVzkPQJa7zZVnqw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["#https://velog.io/@euisuk-chung/%EC%84%A4%EB%AA%85%EC%B6%94%EA%B0%80-Q-Learning-%EA%B0%95%ED%99%94%ED%95%99%EC%8A%B5%EC%9D%98-%ED%95%B5%EC%8B%AC-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%9D%B4%ED%95%B4\n","import numpy as np\n","\n","# 환경 설정\n","n_states = 16  # 상태 수\n","n_actions = 4  # 행동 수 (상, 하, 좌, 우)\n","goal_state = 15  # 목표 상태"],"metadata":{"id":"wa3AvFPdk8fz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Q-Table 초기화\n","Q_table = np.zeros((n_states, n_actions))\n","print(Q_table)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yhWQpq_1lENV","executionInfo":{"status":"ok","timestamp":1745410630923,"user_tz":-540,"elapsed":26,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"2d7a75fe-6a7a-4aac-b734-9561d9a70bc7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]]\n"]}]},{"cell_type":"code","source":["# 하이퍼파라미터 설정\n","learning_rate = 0.8\n","discount_factor = 0.95\n","exploration_prob = 0.2\n","epochs = 1000"],"metadata":{"id":"YijwgkyKlShU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Q-Learning 알고리즘\n","for epoch in range(epochs):\n","    current_state = np.random.randint(0, n_states)  # 무작위 상태에서 시작\n","\n","    while current_state != goal_state:\n","        # 행동 선택 (epsilon-greedy 전략)\n","        if np.random.rand() < exploration_prob:\n","            action = np.random.randint(0, n_actions)  # 탐색\n","        else:\n","            action = np.argmax(Q_table[current_state])  # 활용\n","\n","        # 환경에서 다음 상태로 이동 (단순화된 이동)\n","        next_state = (current_state + 1) % n_states\n","\n","        # 보상 정의 (목표 상태 도달 시 보상 부여)\n","        reward = 1 if next_state == goal_state else 0\n","\n","        # Q-값 업데이트 (벨만 방정식 적용)\n","        Q_table[current_state, action] += learning_rate * \\\n","            (reward + discount_factor * np.max(Q_table[next_state]) - Q_table[current_state, action])\n","\n","        current_state = next_state  # 다음 상태로 이동"],"metadata":{"id":"BW4vjDP1mdD3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 학습된 Q-Table 출력\n","print(\"학습된 Q-Table:\")\n","print(Q_table)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XJkyfs9fmgFF","executionInfo":{"status":"ok","timestamp":1745410985084,"user_tz":-540,"elapsed":4,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"df346a33-f436-455b-d9e5-43c67c9c8930"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["학습된 Q-Table:\n","[[0.48767498 0.4868947  0.46423907 0.48377358]\n"," [0.51334208 0.51330882 0.51334175 0.51334182]\n"," [0.54036009 0.54036003 0.54031859 0.54018714]\n"," [0.56880009 0.56880009 0.56880009 0.56880003]\n"," [0.59870191 0.59873694 0.59873694 0.59873688]\n"," [0.63024941 0.63024941 0.63024941 0.63024941]\n"," [0.66342043 0.66342043 0.66342043 0.66342043]\n"," [0.6983373  0.6983373  0.6983373  0.6983373 ]\n"," [0.73509189 0.73509189 0.73509189 0.73509189]\n"," [0.77378094 0.77378094 0.77378094 0.77378094]\n"," [0.81450625 0.81450625 0.81450625 0.81450625]\n"," [0.857375   0.857375   0.857375   0.857375  ]\n"," [0.9025     0.9025     0.9025     0.9025    ]\n"," [0.95       0.95       0.95       0.95      ]\n"," [1.         1.         1.         1.        ]\n"," [0.         0.         0.         0.        ]]\n"]}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"-gzubqL_nDtz"}},{"cell_type":"code","source":["#https://www.geeksforgeeks.org/q-learning-in-python/\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Parameters\n","n_states = 16\n","n_actions = 4\n","goal_state = 15\n","\n","Q_table = np.zeros((n_states, n_actions))\n","\n","learning_rate = 0.8\n","discount_factor = 0.95\n","exploration_prob = 0.2\n","epochs = 1000\n","\n","# Q-learning process\n","for epoch in range(epochs):\n","    current_state = np.random.randint(0, n_states)\n","\n","    while current_state != goal_state:\n","\n","        # Exploration vs. Exploitation (ϵ-greedy policy)\n","        if np.random.rand() < exploration_prob:\n","            action = np.random.randint(0, n_actions)\n","        else:\n","            action = np.argmax(Q_table[current_state])\n","\n","        # Transition to the next state (circular movement for simplicity)\n","        next_state = (current_state + 1) % n_states\n","\n","        # Reward function (1 if goal_state reached, 0 otherwise)\n","        reward = 1 if next_state == goal_state else 0\n","\n","        # Q-value update rule (TD update)\n","        Q_table[current_state, action] += learning_rate * \\\n","            (reward + discount_factor * np.max(Q_table[next_state]) - Q_table[current_state, action])\n","\n","        current_state = next_state  # Update current state\n","\n","# Visualization of the Q-table in a grid format\n","q_values_grid = np.max(Q_table, axis=1).reshape((4, 4))\n","\n","# Plot the grid of Q-values\n","plt.figure(figsize=(6, 6))\n","plt.imshow(q_values_grid, cmap='coolwarm', interpolation='nearest')\n","plt.colorbar(label='Q-value')\n","plt.title('Learned Q-values for each state')\n","plt.xticks(np.arange(4), ['0', '1', '2', '3'])\n","plt.yticks(np.arange(4), ['0', '1', '2', '3'])\n","plt.gca().invert_yaxis()  # To match grid layout\n","plt.grid(True)\n","\n","# Annotating the Q-values on the grid\n","for i in range(4):\n","    for j in range(4):\n","        plt.text(j, i, f'{q_values_grid[i, j]:.2f}', ha='center', va='center', color='black')\n","\n","plt.show()\n","\n","# Print learned Q-table\n","print(\"Learned Q-table:\")\n","print(Q_table)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":825},"id":"q1Ao6oKIsIms","executionInfo":{"status":"ok","timestamp":1745412514706,"user_tz":-540,"elapsed":1555,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"c6b7e608-d3a9-4294-a26e-b4fdeec79216"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Learned Q-table:\n","[[0.46816798 0.46816798 0.48766874 0.48767498]\n"," [0.51334208 0.51251987 0.51333551 0.51317781]\n"," [0.54035984 0.54036008 0.54036009 0.54036009]\n"," [0.56880009 0.56880009 0.56880009 0.56880009]\n"," [0.59873694 0.59873694 0.59873694 0.59873694]\n"," [0.63024941 0.63024941 0.63024941 0.63024941]\n"," [0.66342043 0.66342043 0.66342043 0.66342043]\n"," [0.6983373  0.6983373  0.6983373  0.6983373 ]\n"," [0.73509189 0.73509189 0.73509189 0.73509189]\n"," [0.77378094 0.77378094 0.77378094 0.77378094]\n"," [0.81450625 0.81450625 0.81450625 0.81450625]\n"," [0.857375   0.857375   0.857375   0.857375  ]\n"," [0.9025     0.9025     0.9025     0.9025    ]\n"," [0.95       0.95       0.95       0.95      ]\n"," [1.         1.         1.         1.        ]\n"," [0.         0.         0.         0.        ]]\n"]}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"POfxyQqrxdsS"}},{"cell_type":"markdown","source":["# [CartPole in OpenAI Gym](https://)\n","- 고전적인 RL 문제 중 하나는 OpenAI Gym의 CartPole 환경으로, 카트 위에 막대를 올려놓고 [균형을 맞추는 것이 목표](https://)입니다.\n","- 에이전트는 막대가 넘어지지 않도록 카트를 왼쪽이나 오른쪽으로 밀 수 있습니다.\n",">- [상태 공간](https://) : 카트-막대 시스템의 네 가지 주요 변수[(위치, 속도, 각도, 각속도)](https://)를 설명합니다.\n",">-[ 행동 공간](https://) : 이산적인 행동으로, 카트를 왼쪽이나 오른쪽으로 움직입니다.\n",">- [보상](https://) : 에이전트는 막대가 균형을 유지하는 한 걸음마다 1점을 얻습니다."],"metadata":{"id":"SmsMvMxh8_ll"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"F2nqUzA3EL-B"}},{"cell_type":"markdown","source":["https://jonghyunho.github.io/assets/img/posts/20200505/cartpole_episode_100.gif"],"metadata":{"id":"jzTCJJV_EAV4"}},{"cell_type":"code","source":["#https://www.geeksforgeeks.org/what-is-reinforcement-learning/\n","import gym\n","import numpy as np\n","import warnings\n","\n","# Suppress specific deprecation warnings\n","warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n","\n","# Load the environment with render mode specified\n","env = gym.make('CartPole-v1', render_mode=\"human\")\n","\n","# Initialize the environment to get the initial state\n","state = env.reset()\n","\n","# Print the state space and action space\n","print(\"State space:\", env.observation_space)\n","print(\"Action space:\", env.action_space)  #좌, 우의 값이 0과 1로 랜덤하게 전달됨\n","\n","# Run a few steps in the environment with random actions\n","for _ in range(10):\n","    env.render()  # Render the environment for visualization\n","    action = env.action_space.sample()  # Take a random action\n","\n","    # Take a step in the environment\n","    step_result = env.step(action)\n","\n","    # Check the number of values returned and unpack accordingly\n","    if len(step_result) == 4:\n","        next_state, reward, done, info = step_result\n","        terminated = False\n","    else:\n","        next_state, reward, done, truncated, info = step_result\n","        terminated = done or truncated\n","\n","    print(f\"Action: {action}, Reward: {reward}, Next State: {next_state}, Done: {done}, Info: {info}\")\n","\n","    if terminated:\n","        state = env.reset()  # Reset the environment if the episode is finished\n","\n","env.close()  # Close the environment when done"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T_m5XHVIxeiQ","executionInfo":{"status":"ok","timestamp":1745413862564,"user_tz":-540,"elapsed":225,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"0d904d1e-b0d9-4708-b582-1ed17cb511b8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["State space: Box([-4.8000002e+00 -3.4028235e+38 -4.1887903e-01 -3.4028235e+38], [4.8000002e+00 3.4028235e+38 4.1887903e-01 3.4028235e+38], (4,), float32)\n","Action space: Discrete(2)\n","Action: 0, Reward: 1.0, Next State: [-0.02658645 -0.20126896 -0.02581841  0.23844706], Done: False, Info: {}\n","Action: 1, Reward: 1.0, Next State: [-0.03061183 -0.00578786 -0.02104946 -0.06226663], Done: False, Info: {}\n","Action: 0, Reward: 1.0, Next State: [-0.03072759 -0.20060179 -0.0222948   0.22370143], Done: False, Info: {}\n","Action: 0, Reward: 1.0, Next State: [-0.03473962 -0.3953981  -0.01782077  0.5092692 ], Done: False, Info: {}\n","Action: 0, Reward: 1.0, Next State: [-0.04264759 -0.5902645  -0.00763539  0.79628336], Done: False, Info: {}\n","Action: 0, Reward: 1.0, Next State: [-0.05445288 -0.7852809   0.00829028  1.0865545 ], Done: False, Info: {}\n","Action: 0, Reward: 1.0, Next State: [-0.0701585  -0.9805112   0.03002137  1.3818272 ], Done: False, Info: {}\n","Action: 1, Reward: 1.0, Next State: [-0.08976872 -0.78577644  0.05765792  1.0986817 ], Done: False, Info: {}\n","Action: 0, Reward: 1.0, Next State: [-0.10548425 -0.98160803  0.07963155  1.408883  ], Done: False, Info: {}\n","Action: 1, Reward: 1.0, Next State: [-0.12511641 -0.7875591   0.10780922  1.1421189 ], Done: False, Info: {}\n"]}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"Ut69v8gly6Li"}},{"cell_type":"markdown","source":["# [OpenAI Gym Taxi - Policy Iteration 강화학습](https://)\n","- OpenAI Gym에서 제공하는 다양한 환경 중 하나인 [Taxi(Toy Text) 환경은](https://) 위 사진과 같이 구성되어 있습니다.\n","- 그리드에는 [R(빨강), G(초록), Y(노랑) 및 B(파랑)로 표시되는 4개의 지정된 위치가](https://) 있습니다.\n","- 에피소드가 시작되면 [택시는 임의의 장소에서 출발하고 승객은 임의의 또 다른 장소에 있습니다. 택시는 승객의 위치로 운전하여 승객을 태우고 승객의 목적지(지정된 4개의 위치 중 다른 하나)로 운전한 다음 승객을 하차](https://)시키게 됩니다.\n","- 승객이 내려지면 에피소드는 끝나게 됩니다.\n","\n",""],"metadata":{"id":"SQzcbiIpDSWY"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"JJ2XOwN3Dlvo"}},{"cell_type":"markdown","source":["https://blog.kakaocdn.net/dn/b9ZwLQ/btrXpbpCEDY/kPJbukbcCbukHbxt1Z655k/img.gif"],"metadata":{"id":"vq5ARcRRDZKX"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"YKHYb4bgDmkY"}},{"cell_type":"code","source":["#https://www.geeksforgeeks.org/model-free-reinforcement-learning-an-overview/\n","import gymnasium as gym\n","env = gym.make('Taxi-v3',render_mode='ansi')\n","env.reset()\n","\n","print(env.render())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H38dTBFM1s2h","executionInfo":{"status":"ok","timestamp":1745414968818,"user_tz":-540,"elapsed":59,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"a2afbf4d-390c-4549-93d7-f21eb94c7119"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---------+\n","|\u001b[35mR\u001b[0m: | : :G|\n","| : | : : |\n","| : : : : |\n","| | : |\u001b[43m \u001b[0m: |\n","|\u001b[34;1mY\u001b[0m| : |B: |\n","+---------+\n","\n","\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from collections import defaultdict\n","import matplotlib.pyplot as plt\n","\n","\n","class QLearningAgent:\n","    def __init__(self, env, learning_rate, initial_epsilon, epsilon_decay, final_epsilon, discount_factor=0.95\n","                 ):\n","        self.env = env\n","        self.learning_rate = learning_rate\n","        self.discount_factor = discount_factor\n","\n","        self.epsilon = initial_epsilon\n","        self.epsilon_decay = epsilon_decay\n","        self.final_epsilon = final_epsilon\n","\n","        # Initialize an empty dictionary of state-action values\n","        self.q_values = defaultdict(lambda: np.zeros(env.action_space.n))\n","\n","    def get_action(self, obs) -> int:\n","        x = np.random.rand()\n","        if x < self.final_epsilon:\n","            return self.env.action_space.sample()\n","        else:\n","            return np.argmax(self.q_values[obs])\n","\n","    def update(self, obs, action, reward, terminated, next_obs):\n","        if not terminated:\n","            future_q_value = np.max(self.q_values[next_obs])\n","            self.q_values[obs][action] += self.learning_rate * \\\n","                (reward + self.discount_factor *\n","                 future_q_value-self.q_values[obs][action])\n","\n","    def decay_epsilon(self):\n","        \"\"\"Decrease the exploration rate epsilon until it reaches its final value\"\"\"\n","        self.epsilon = max(self.final_epsilon,\n","                           self.epsilon - self.epsilon_decay)"],"metadata":{"id":"rJj3PkIF1wxC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train_agent(agent, env, episodes, eval_interval=100):\n","    rewards = []\n","    best_reward = -np.inf\n","    for i in range(episodes):\n","        obs, _ = env.reset()\n","        terminated = False\n","        truncated = False\n","        length = 0\n","        total_reward = 0\n","\n","        while (terminated == False) and (truncated == False):\n","\n","            action = agent.get_action(obs)\n","            next_obs, reward, terminated, truncated, _ = env.step(action)\n","\n","            agent.update(obs, action, reward, terminated, next_obs)\n","            obs = next_obs\n","            length = length+1\n","            total_reward += reward\n","\n","        agent.decay_epsilon()\n","        rewards.append(total_reward)\n","\n","        if i >= eval_interval:\n","            avg_return = np.mean(rewards[i-eval_interval: i])\n","            best_reward = max(avg_return, best_reward)\n","        if i % eval_interval == 0 and i > 0:\n","\n","            print(f\"Episode{i} -> best_reward={best_reward} \")\n","    return rewards"],"metadata":{"id":"GiVUkgja10TC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["episodes = 20000\n","learning_rate = 0.5\n","discount_factor = 0.95\n","initial_epsilon = 1\n","final_epsilon = 0\n","epsilon_decay = ((final_epsilon-initial_epsilon) / (episodes/2))\n","env = gym.make('Taxi-v3', render_mode='ansi')\n","agent = QLearningAgent(env, learning_rate, initial_epsilon,\n","                       epsilon_decay, final_epsilon)\n","\n","returns = train_agent(agent, env, episodes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XBaXBcza13OS","executionInfo":{"status":"ok","timestamp":1745415025322,"user_tz":-540,"elapsed":13381,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"e80ca63a-3e17-4805-85be-08908859a87f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Episode100 -> best_reward=-232.2 \n","Episode200 -> best_reward=-115.19 \n","Episode300 -> best_reward=-34.17 \n","Episode400 -> best_reward=-10.73 \n","Episode500 -> best_reward=-6.98 \n","Episode600 -> best_reward=-1.52 \n","Episode700 -> best_reward=0.0 \n","Episode800 -> best_reward=0.2 \n","Episode900 -> best_reward=3.62 \n","Episode1000 -> best_reward=5.3 \n","Episode1100 -> best_reward=6.75 \n","Episode1200 -> best_reward=6.93 \n","Episode1300 -> best_reward=6.93 \n","Episode1400 -> best_reward=6.93 \n","Episode1500 -> best_reward=7.46 \n","Episode1600 -> best_reward=7.63 \n","Episode1700 -> best_reward=7.63 \n","Episode1800 -> best_reward=7.63 \n","Episode1900 -> best_reward=7.85 \n","Episode2000 -> best_reward=8.09 \n","Episode2100 -> best_reward=8.09 \n","Episode2200 -> best_reward=8.21 \n","Episode2300 -> best_reward=8.21 \n","Episode2400 -> best_reward=8.21 \n","Episode2500 -> best_reward=8.21 \n","Episode2600 -> best_reward=8.21 \n","Episode2700 -> best_reward=8.21 \n","Episode2800 -> best_reward=8.21 \n","Episode2900 -> best_reward=8.21 \n","Episode3000 -> best_reward=8.21 \n","Episode3100 -> best_reward=8.21 \n","Episode3200 -> best_reward=8.26 \n","Episode3300 -> best_reward=8.26 \n","Episode3400 -> best_reward=8.26 \n","Episode3500 -> best_reward=8.26 \n","Episode3600 -> best_reward=8.26 \n","Episode3700 -> best_reward=8.39 \n","Episode3800 -> best_reward=8.39 \n","Episode3900 -> best_reward=8.39 \n","Episode4000 -> best_reward=8.39 \n","Episode4100 -> best_reward=8.39 \n","Episode4200 -> best_reward=8.39 \n","Episode4300 -> best_reward=8.39 \n","Episode4400 -> best_reward=8.39 \n","Episode4500 -> best_reward=8.39 \n","Episode4600 -> best_reward=8.39 \n","Episode4700 -> best_reward=8.46 \n","Episode4800 -> best_reward=8.46 \n","Episode4900 -> best_reward=8.46 \n","Episode5000 -> best_reward=8.46 \n","Episode5100 -> best_reward=8.46 \n","Episode5200 -> best_reward=8.46 \n","Episode5300 -> best_reward=8.46 \n","Episode5400 -> best_reward=8.66 \n","Episode5500 -> best_reward=8.66 \n","Episode5600 -> best_reward=8.66 \n","Episode5700 -> best_reward=8.66 \n","Episode5800 -> best_reward=8.66 \n","Episode5900 -> best_reward=8.66 \n","Episode6000 -> best_reward=8.66 \n","Episode6100 -> best_reward=8.66 \n","Episode6200 -> best_reward=8.66 \n","Episode6300 -> best_reward=8.66 \n","Episode6400 -> best_reward=8.66 \n","Episode6500 -> best_reward=8.66 \n","Episode6600 -> best_reward=8.66 \n","Episode6700 -> best_reward=8.66 \n","Episode6800 -> best_reward=8.66 \n","Episode6900 -> best_reward=8.66 \n","Episode7000 -> best_reward=8.66 \n","Episode7100 -> best_reward=8.66 \n","Episode7200 -> best_reward=8.66 \n","Episode7300 -> best_reward=8.66 \n","Episode7400 -> best_reward=8.66 \n","Episode7500 -> best_reward=8.66 \n","Episode7600 -> best_reward=8.66 \n","Episode7700 -> best_reward=8.66 \n","Episode7800 -> best_reward=8.66 \n","Episode7900 -> best_reward=8.66 \n","Episode8000 -> best_reward=8.66 \n","Episode8100 -> best_reward=8.66 \n","Episode8200 -> best_reward=8.66 \n","Episode8300 -> best_reward=8.66 \n","Episode8400 -> best_reward=8.66 \n","Episode8500 -> best_reward=8.66 \n","Episode8600 -> best_reward=8.66 \n","Episode8700 -> best_reward=8.66 \n","Episode8800 -> best_reward=8.66 \n","Episode8900 -> best_reward=8.66 \n","Episode9000 -> best_reward=8.66 \n","Episode9100 -> best_reward=8.66 \n","Episode9200 -> best_reward=8.66 \n","Episode9300 -> best_reward=8.66 \n","Episode9400 -> best_reward=8.66 \n","Episode9500 -> best_reward=8.66 \n","Episode9600 -> best_reward=8.66 \n","Episode9700 -> best_reward=8.66 \n","Episode9800 -> best_reward=8.66 \n","Episode9900 -> best_reward=8.66 \n","Episode10000 -> best_reward=8.66 \n","Episode10100 -> best_reward=8.66 \n","Episode10200 -> best_reward=8.66 \n","Episode10300 -> best_reward=8.66 \n","Episode10400 -> best_reward=8.66 \n","Episode10500 -> best_reward=8.66 \n","Episode10600 -> best_reward=8.66 \n","Episode10700 -> best_reward=8.66 \n","Episode10800 -> best_reward=8.66 \n","Episode10900 -> best_reward=8.66 \n","Episode11000 -> best_reward=8.66 \n","Episode11100 -> best_reward=8.66 \n","Episode11200 -> best_reward=8.66 \n","Episode11300 -> best_reward=8.66 \n","Episode11400 -> best_reward=8.66 \n","Episode11500 -> best_reward=8.66 \n","Episode11600 -> best_reward=8.66 \n","Episode11700 -> best_reward=8.66 \n","Episode11800 -> best_reward=8.66 \n","Episode11900 -> best_reward=8.66 \n","Episode12000 -> best_reward=8.66 \n","Episode12100 -> best_reward=8.66 \n","Episode12200 -> best_reward=8.66 \n","Episode12300 -> best_reward=8.66 \n","Episode12400 -> best_reward=8.66 \n","Episode12500 -> best_reward=8.66 \n","Episode12600 -> best_reward=8.66 \n","Episode12700 -> best_reward=8.66 \n","Episode12800 -> best_reward=8.66 \n","Episode12900 -> best_reward=8.66 \n","Episode13000 -> best_reward=8.66 \n","Episode13100 -> best_reward=8.66 \n","Episode13200 -> best_reward=8.66 \n","Episode13300 -> best_reward=8.66 \n","Episode13400 -> best_reward=8.66 \n","Episode13500 -> best_reward=8.66 \n","Episode13600 -> best_reward=8.66 \n","Episode13700 -> best_reward=8.66 \n","Episode13800 -> best_reward=8.66 \n","Episode13900 -> best_reward=8.66 \n","Episode14000 -> best_reward=8.69 \n","Episode14100 -> best_reward=8.69 \n","Episode14200 -> best_reward=8.69 \n","Episode14300 -> best_reward=8.69 \n","Episode14400 -> best_reward=8.69 \n","Episode14500 -> best_reward=8.69 \n","Episode14600 -> best_reward=8.69 \n","Episode14700 -> best_reward=8.69 \n","Episode14800 -> best_reward=8.69 \n","Episode14900 -> best_reward=8.69 \n","Episode15000 -> best_reward=8.69 \n","Episode15100 -> best_reward=8.69 \n","Episode15200 -> best_reward=8.69 \n","Episode15300 -> best_reward=8.69 \n","Episode15400 -> best_reward=8.69 \n","Episode15500 -> best_reward=8.69 \n","Episode15600 -> best_reward=8.69 \n","Episode15700 -> best_reward=8.69 \n","Episode15800 -> best_reward=8.69 \n","Episode15900 -> best_reward=8.69 \n","Episode16000 -> best_reward=8.69 \n","Episode16100 -> best_reward=8.69 \n","Episode16200 -> best_reward=8.69 \n","Episode16300 -> best_reward=8.69 \n","Episode16400 -> best_reward=8.69 \n","Episode16500 -> best_reward=8.69 \n","Episode16600 -> best_reward=8.69 \n","Episode16700 -> best_reward=8.69 \n","Episode16800 -> best_reward=8.69 \n","Episode16900 -> best_reward=8.69 \n","Episode17000 -> best_reward=8.69 \n","Episode17100 -> best_reward=8.69 \n","Episode17200 -> best_reward=8.69 \n","Episode17300 -> best_reward=8.69 \n","Episode17400 -> best_reward=8.69 \n","Episode17500 -> best_reward=8.69 \n","Episode17600 -> best_reward=8.69 \n","Episode17700 -> best_reward=8.69 \n","Episode17800 -> best_reward=8.69 \n","Episode17900 -> best_reward=8.69 \n","Episode18000 -> best_reward=8.69 \n","Episode18100 -> best_reward=8.69 \n","Episode18200 -> best_reward=8.69 \n","Episode18300 -> best_reward=8.69 \n","Episode18400 -> best_reward=8.69 \n","Episode18500 -> best_reward=8.83 \n","Episode18600 -> best_reward=8.83 \n","Episode18700 -> best_reward=8.83 \n","Episode18800 -> best_reward=8.83 \n","Episode18900 -> best_reward=8.83 \n","Episode19000 -> best_reward=8.83 \n","Episode19100 -> best_reward=8.83 \n","Episode19200 -> best_reward=8.83 \n","Episode19300 -> best_reward=8.83 \n","Episode19400 -> best_reward=8.83 \n","Episode19500 -> best_reward=8.83 \n","Episode19600 -> best_reward=8.83 \n","Episode19700 -> best_reward=8.83 \n","Episode19800 -> best_reward=8.83 \n","Episode19900 -> best_reward=8.83 \n"]}]},{"cell_type":"code","source":["def plot_returns(returns):\n","    plt.plot(np.arange(len(returns)), returns)\n","    plt.title('Episode returns')\n","    plt.xlabel('Episode')\n","    plt.ylabel('Return')\n","    plt.show()\n","\n","plot_returns(returns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"s3ew-9d216t5","executionInfo":{"status":"ok","timestamp":1745415026346,"user_tz":-540,"elapsed":264,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"7bd22a9b-f6ef-495a-dcd3-c256ab7a5932"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def run_agent(agent, env):\n","    agent.epsilon = 0    # No need to keep exploring\n","    obs, _ = env.reset() # get the current state\n","    env.render()\n","    terminated = truncated = False\n","\n","    while terminated == False and truncated == False   :\n","        action = agent.get_action(obs)\n","        next_obs, _, terminated, truncated, _ = env.step(action)\n","        print(env.render())\n","\n","        obs = next_obs\n","\n","env = gym.make('Taxi-v3', render_mode='ansi')\n","run_agent(agent, env)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1D7TBucA19-K","executionInfo":{"status":"ok","timestamp":1745415039615,"user_tz":-540,"elapsed":6,"user":{"displayName":"박인철","userId":"06375623913430966996"}},"outputId":"0e8bfe55-654e-4eb6-ad56-dd1b98f0034f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+---------+\n","|\u001b[35mR\u001b[0m: | : :\u001b[34;1mG\u001b[0m|\n","| : | : : |\n","| : : : : |\n","| | : | :\u001b[43m \u001b[0m|\n","|Y| : |B: |\n","+---------+\n","  (North)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :\u001b[34;1mG\u001b[0m|\n","| : | : : |\n","| : : : :\u001b[43m \u001b[0m|\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (North)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :\u001b[34;1mG\u001b[0m|\n","| : | : :\u001b[43m \u001b[0m|\n","| : : : : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (North)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :\u001b[34;1m\u001b[43mG\u001b[0m\u001b[0m|\n","| : | : : |\n","| : : : : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (North)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :\u001b[42mG\u001b[0m|\n","| : | : : |\n","| : : : : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (Pickup)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :G|\n","| : | : :\u001b[42m_\u001b[0m|\n","| : : : : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (South)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :G|\n","| : | : : |\n","| : : : :\u001b[42m_\u001b[0m|\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (South)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :G|\n","| : | : : |\n","| : : :\u001b[42m_\u001b[0m: |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (West)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :G|\n","| : | : : |\n","| : :\u001b[42m_\u001b[0m: : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (West)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :G|\n","| : | : : |\n","| :\u001b[42m_\u001b[0m: : : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (West)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m: | : :G|\n","| :\u001b[42m_\u001b[0m| : : |\n","| : : : : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (North)\n","\n","+---------+\n","|\u001b[35mR\u001b[0m:\u001b[42m_\u001b[0m| : :G|\n","| : | : : |\n","| : : : : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (North)\n","\n","+---------+\n","|\u001b[35m\u001b[42mR\u001b[0m\u001b[0m: | : :G|\n","| : | : : |\n","| : : : : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (West)\n","\n","+---------+\n","|\u001b[35m\u001b[34;1m\u001b[43mR\u001b[0m\u001b[0m\u001b[0m: | : :G|\n","| : | : : |\n","| : : : : |\n","| | : | : |\n","|Y| : |B: |\n","+---------+\n","  (Dropoff)\n","\n"]}]}]}