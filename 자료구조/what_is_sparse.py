"""
##################################################
## 파이썬에서 희소 행렬(Sparse Matrix) 출력
#################################################

 - 가장 일반적인 방법은 주로 scipy.sparse 라이브러리를 사용
 - 희소 행렬은 저장 방식 때문에 일반적인 print() 명령으로 출력할 경우, 행렬의 전체 형태 대신 0이 아닌 요소의 위치와 값만 출력되는 것이 기본임

##########################################
두 가지 주요 방법으로 전체 행렬을 확인할 수 있음
##########################################


############################################################
## toarray() 또는 todense()를 사용하여 일반 NumPy 배열로 변환 후 출력
############################################################

 - 희소 행렬을 일반적인 2차원 NumPy 배열(Dense Array)로 변환하여 출력하는 방법
 - 이 방법은 행렬이 크지 않을 때 전체 모습을 확인하기에 가장 편리함
 - 주의) 희소 행렬이 매우 클 경우, 이 방법은 메모리 사용량이 급증하여 프로그램이 느려지거나 오류가 발생할 수 있음

"""

import numpy as np
from scipy.sparse import csr_matrix

# 1. 희소 행렬 생성 (예시)
# 4x5 행렬
# [[0, 0, 3, 0, 4],
#  [0, 0, 5, 7, 0],
#  [0, 0, 0, 0, 0],
#  [0, 2, 6, 0, 0]]
data = np.array([3, 4, 5, 7, 2, 6])
rows = np.array([0, 0, 1, 1, 3, 3])
cols = np.array([2, 4, 2, 3, 1, 2])
sparse_matrix = csr_matrix((data, (rows, cols)), shape=(4, 5))

#############################################
## toarray() 메서드를 사용하여 전체 행렬 출력
#############################################

dense_array = sparse_matrix.toarray()
print("--- toarray()를 사용한 전체 행렬 출력 (NumPy 배열) ---")
print(dense_array)

# Output:
# [[0 0 3 0 4]
#  [0 0 5 7 0]
#  [0 0 0 0 0]
#  [0 2 6 0 0]]

# 참고: todense()도 사용 가능 (결과는 numpy matrix 객체)
# dense_matrix = sparse_matrix.todense()
# print(dense_matrix) 

"""
#########################################
## 기본 print()를 사용하여 0이 아닌 요소만 출력
#########################################

 - scipy.sparse 객체를 그대로 print()하면, 메모리 효율성을 위해 0이 아닌 요소의 (행, 열) 값 형태로 출력됨
"""

import numpy as np
from scipy.sparse import csr_matrix

# 1. 희소 행렬 생성 (위와 동일)
data = np.array([3, 4, 5, 7, 2, 6])
rows = np.array([0, 0, 1, 1, 3, 3])
cols = np.array([2, 4, 2, 3, 1, 2])
sparse_matrix = csr_matrix((data, (rows, cols)), shape=(4, 5))

# 2. 희소 행렬 객체 자체를 출력
print("--- 희소 행렬 객체 자체 출력 (0이 아닌 요소만) ---")
print(sparse_matrix)
# Output:
#   (0, 2)    3
#   (0, 4)    4
#   (1, 2)    5
#   (1, 3)    7
#   (3, 1)    2
#   (3, 2)    6

"""
#####################################
## 큰 희소 행렬을 위한 설정 (NumPy)
#####################################

 - NumPy 배열로 변환할 때 (예: toarray() 사용 후) 출력이 중간에 잘린다면, 
   NumPy의 출력 옵션을 조정하여 모든 요소를 출력하도록 설정할 수 있음
"""

import numpy as np

# 모든 요소를 출력하도록 설정 (매우 큰 배열에 대해 사용 시 주의)
np.set_printoptions(threshold=np.inf, linewidth=np.inf)

# 이제 toarray()로 변환된 매우 큰 행렬도 모두 출력됨
# print(sparse_matrix.toarray()) 

