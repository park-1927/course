#파이썬은 대부분의 메모리 할당을 자동으로 처리하는 언어이기 때문에, 
#C나 C++처럼 프로그래머가 직접 malloc()이나 new 같은 함수를 사용해 동적으로 메모리를 할당하는 
#명시적인 방법은 일반적으로 사용되지 않음

#파이썬의 모든 것은 객체(Object)이며, 이 객체들은 실행 시간(런타임)에 자동으로 
#힙(Heap) 영역에 동적으로 할당됨
#힙 영역(Heap Area)은 프로그램이 실행되는 동안 동적으로 메모리를 할당하고 관리하는 데 사용되는 메모리 공간임

#힙 영역은 프로그램 실행 시 운영체제(OS)가 프로세스에 할당한 가상 메모리 공간 중 하나에 위치하며, 
#파이썬의 메모리 관리자(Python Memory Manager)가 이 영역을 관리함
# 누가 할당하는가 (주체) --> 힙 메모리 할당에는 두 주체가 관여함
### 운영체제 (OS)	--> 최초 메모리 제공	프로그램 --> (프로세스)이 실행될 때, OS는 해당 프로세스에 코드, 데이터, 스택, 힙을 포함한 가상 메모리 공간을 할당
### 파이썬 메모리 관리자 --> 힙 내부 관리 --> OS로부터 받은 큰 힙 영역 내에서, 파이썬 인터프리터는 int, list, dict 등 객체의 생성 요청이 있을 때마다 
###필요한 크기의 메모리 블록을 동적으로 할당 및 해제함

#가상 메모리 내의 위치
#일반적인 프로세스의 가상 메모리 레이아웃은 다음과 같으며,힙(Heap)은 보통 스택(Stack) 영역과 데이터(Data) 영역 사이에 위치
# 1) 코드 영역 (Text/Code) : 실행할 프로그램 코드가 저장
# 2) 데이터 영역 (Data) : 전역 변수나 정적 변수 등이 저장
# 3) 힙 영역 (Heap) : 동적 할당된 객체나 인스턴스의 실제 데이터가 저장--> 이 영역은 아래쪽(주소가 증가하는 방향)으로 확장
# 4) 스택 영역 (Stack) : 지역 변수, 함수 매개변수, 복귀 주소 등이 저장 --> 이 영역은 위쪽(주소가 감소하는 방향)으로 확장

#힙 영역과 스택 영역의 할당 크기는 운영체제(OS), 아키텍처(32비트/64비트), 그리고 프로그래밍 언어 및 컴파일러 설정에 따라 크게 달라짐
#파이썬과 같은 고급 언어에서는 이 크기를 직접 제어하기보다 OS와 인터프리터에 의해 관리됨

############################################
#객체 생성 및 할당 (Assignment) --> 새로운 변수를 만들고 값을 할당하거나, 
#기존 변수에 새 객체를 할당할 때 파이썬 인터프리터가 필요한 만큼의 메모리를 동적으로 확보함

#메모리 관리 (가비지 컬렉션) --> 프로그래머가 직접 메모리를 해제할 필요가 없는 것은 
#파이썬의 자동 메모리 관리(Automatic Memory Management) 시스템임

#참조 카운팅 (Reference Counting) - 모든 객체는 자신을 참조하는 변수나 객체의 개수를 기록함
#참조 카운트가 0이 되는 순간, 해당 객체는 더 이상 사용되지 않는 것으로 간주되어 메모리가 자동으로 해제(회수)됨
#세대별 가비지 컬렉션 (Generational Garbage Collection) - 참조 카운팅으로 해결할 수 없는 순환 참조 문제를 해결하기 위해 
#주기적으로 실행되는 보조 메커니즘임

#########################################
# 정수 객체 '10'이 힙에 동적으로 생성됨
x = 10 

# 리스트 객체(크기 가변)가 힙에 동적으로 생성됨
my_list = [1, 2, 3] 

# 클래스 인스턴스(객체) 생성 시 메모리 동적 할당

class MyClass:
    pass

obj = MyClass()

########################################
#가변 객체의 크기 변경 -->list, dict, set과 같은 가변(Mutable) 객체의 크기가 변할 때(요소를 추가/삭제할 때), 
#파이썬은 필요에 따라 메모리 크기를 동적으로 늘리거나 줄임

data = [] # 빈 리스트 생성 (동적)
data.append(100) # 리스트에 요소 추가 시 필요하다면 메모리가 확장됨

data_dict = {'a': 1}
data_dict['b'] = 2 # 딕셔너리에 새 항목 추가 시 메모리 동적 할당

######################################
#개별 객체의 메모리 사용량 확인: sys.getsizeof()
#가장 일반적인 방법으로, sys 모듈의 getsizeof() 함수를 사용하여 특정 객체가 
#현재 얼마나 많은 메모리(바이트)를 차지하는지 확인할 수 있음 --> 이 메모리는 대부분 힙 영역에 할당됨

import sys

# 1. 정수형 (불변 객체)
a = 1000
print(f"정수 1000의 크기: {sys.getsizeof(a)} bytes")

# 2. 리스트 (가변 객체)
my_list = [1, 2, 3]
print(f"리스트 [1, 2, 3]의 크기: {sys.getsizeof(my_list)} bytes")

# 3. 리스트에 요소 추가 후 크기 변화 확인
my_list.append(4)
print(f"요소 추가 후 리스트 크기: {sys.getsizeof(my_list)} bytes")
# 리스트는 공간 효율을 위해 미리 여유 공간을 확보하므로,
# 요소 1개 추가해도 메모리가 크게 늘어날 수 있습니다.

# 4. 딕셔너리
my_dict = {'a': 1, 'b': 2}
print(f"딕셔너리 크기: {sys.getsizeof(my_dict)} bytes")