"""
##################################################
## hashlib란?
##################################################

- 파이썬의 표준 라이브러리 모듈로, 다양한 보안 해시(Secure Hash) 및 메시지 다이제스트(Message Digest) 알고리즘에 대한 공통 인터페이스를 제공
   * 데이터를 단방향 암호화하여 고정된 길이의 해시 값(다이제스트)으로 변환하는 기능을 수행

- hashlib의 주요 특징 및 용도

   1. 단방향성 (비가역성)

       * 해시 함수는 입력된 데이터를 해시 값으로 변환하지만, 해시 값을 다시 원래 데이터로 되돌릴 수 없음(복호화 불가능).
       * 이는 비밀번호 저장과 같이 원본 데이터를 안전하게 보관해야 할 때 매우 중요
   
    2. 고정된 출력 길이

       * 입력 데이터의 길이가 아무리 길거나 짧아도, 선택한 알고리즘에 따라 항상 일정한 길이의 해시 값이 출력
       * 예) SHA-256을 사용하면 입력값에 관계없이 256비트(16진수로 64자리)의 해시 값이 나옴

    3. 충돌 저항성

       * 이상적인 해시 함수는 서로 다른 입력에 대해 동일한 해시 값이 나오는 경우(해시 충돌)가 매우 드물어야 함
       * hashlib에서 제공하는 알고리즘들은 높은 충돌 저항성을 갖도록 설계되었음

    4. 사소한 변경에도 큰 변화 (눈사태 효과)

       * 원본 데이터에서 아주 작은 부분(예: 문자 하나)만 변경되어도, 생성되는 해시 값은 완전히 다르게 바뀜
       * 이는 데이터의 무결성(Integrity) 검증에 사용됨

- hashlib의 주요 사용 용도

   * 비밀번호 저장 

      - 사용자의 비밀번호를 그대로 저장하지 않고, 해시 값으로 변환하여 저장
      - 로그인 시 입력된 비밀번호를 다시 해시하여 저장된 해시 값과 비교

   * 데이터 무결성 검사

      - 파일이나 데이터가 전송되거나 저장되는 과정에서 변조되지 않았는지 확인하기 위해, 
      - 원본의 해시 값을 저장해 두고 나중에 다시 계산한 해시 값과 비교

   * 디지털 서명

      - 메시지 인증 및 서명 생성에 사용

- 지원하는 주요 알고리즘

   * hashlib 모듈은 SHA(Secure Hash Algorithm) 계열을 포함한 다양한 알고리즘을 지원
   * SHA-2 계열 - sha256, sha384, sha512 등 (현재 널리 권장됨)
   * SHA-3 계열 - sha3_256, sha3_512 등
   * BLAKE2 계열 - blake2b, blake2s (비교적 최신 알고리즘)

   * 구식 알고리즘 (사용 비권장) - md5, sha1 등 (보안 취약점이 발견되어 최신 시스템에서는 사용을 지양하는 것이 좋음)

"""

import hashlib

# 해시할 데이터 (바이트 문자열)
data = "Hello, World!"

# 문자열을 바이트 형태로 인코딩
encoded_data = data.encode('utf-8')

# SHA-256 해시 객체 생성
sha256_hash_object = hashlib.sha256()

# 데이터 업데이트
sha256_hash_object.update(encoded_data)

# 해시값 추출 (16진수 문자열 형태)
hex_digest = sha256_hash_object.hexdigest()

# 결과 출력
print(f"원본 데이터: {data}")
print(f"SHA-256 해시값: {hex_digest}")