#####################################################################################
## 바이트코드(Bytecode)
##  - 스마트 계약을 이더리움 가상 머신(EVM)이 실행할 수 있는 형태로 변환한 것
##  -  바이트코드는 사람이 읽기 어려운 16진수 문자열의 나열이지만, 실제 블록체인에 배포되는 유일한 형태임
#####################################################################################

##########################################################################################
## 바이트코드와 이진코드(바이너리 코드) ckdl
##  - 모두 0과 1로 이루어진 컴퓨터 언어의 형태이지만, 실행 주체와 종속성에서 명확하게 구분됨

## 구분	                         바이트코드 (Bytecode)	                                   이진코드 (Binary Code, 기계어)
## 실행 주체	가상 머신 (Virtual Machine, VM)	             중앙처리장치 (CPU)
## 코드의 역할	중간 단계의 코드 (소스 코드 → 바이트코드)            최종 단계의 코드 (CPU가 직접 실행)
## 플랫폼 종속성	독립적 (Platform Independent)	             종속적 (Platform Dependent)
## 특징	               JVM, EVM 등 가상 머신이 해석/실행	             특정 하드웨어 아키텍처(CPU)에 맞게 컴파일됨
##########################################################################################


#####################################################################################
가장 간단한 스마트 계약인 'Hello World' 계약을 예로 들어 바이트코드를 출력하는 과정
#####################################################################################

1. 스마트 계약 (Solidity 코드)
    - 가장 기본적인 형태의 계약  --> 단순히 배포자의 주소를 저장하는 기능만 고려
    - Solidity

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HelloWorld {
    address public owner;

    // 계약 배포 시 실행되는 생성자
    constructor() {
        owner = msg.sender;
    }
}

2. 바이트코드 출력 과정 (Remix IDE 사용)
    - 웹 기반의 Remix IDE를 사용하면 가장 쉽게 바이트코드를 확인할 수 있음
       * Remix IDE - 이더리움 및 EVM(Ethereum Virtual Machine) 기반 블록체인의 
                           스마트 컨트랙트 개발을 위해 특별히 설계된 온라인 통합 개발 환경(IDE)

      (단계 A) : 코드 작성 및 컴파일
           - Remix IDE 접속 - Remix IDE (https://remix.ethereum.org/)에 접속
           - 파일 생성 - 새 파일을 생성하고 (예: HelloWorld.sol), 위 Solidity 코드를 붙여 넣음
           - 컴파일러 탭 이동 - 좌측 메뉴에서 'Solidity Compiler' 탭 (세 번째 아이콘)을 선택
           - 컴파일러 버전 확인 - ^0.8.0에 맞는 버전을 선택하고 (보통 자동 선택됨), 'Compile HelloWorld.sol' 버튼을 클릭하여 컴파일을 완료

      (단계 B) : 바이트코드 확인 및 출력
           - 컴파일 결과 탭 열기 - 컴파일이 성공하면, 'Solidity Compiler' 탭 아래에 'Compilation Details' 섹션이 나타남
           - 바이트코드 복사 - 'Compilation Details' 섹션에서 스크롤을 내려 'Bytecode' 항목을 찾음
           - 결과 확인 - 'Bytecode' 항목 아래에 있는 복사 버튼을 클릭하면, 바이트코드 문자열을 얻을 수 있음

3. 바이트코드 출력 예시 (매우 긴 문자열)
    - 위의 HelloWorld 계약을 컴파일하여 출력되는 바이트코드는 다음과 같이 길고 복잡한 16진수 문자열 형태를 가짐
    -  참고 : 컴파일러 버전에 따라 출력되는 코드는 정확히 일치하지 않을 수 있음

#####################################################################################
4. 스마트 계약을 Solidity 코드로 작성한 후 바이트코드(Bytecode)를 바로 출력하는 가장 빠르고 쉬운 방법
#####################################################################################
    - 웹 기반의 통합 개발 환경(IDE)인 Remix IDE를 이용(별도의 설치나 복잡한 설정 없이 웹 브라우저에서 즉시 컴파일하고 바이트코드를 확인할 수 있음)
    -  Remix IDE를 이용해 바이트코드 바로 출력하기 (실습)
       (1단계) Remix IDE 접속 및 코드 붙여넣기
           - Remix IDE 접속 - 웹 브라우저를 열고 Remix IDE (https://remix.ethereum.org/)에 접속
           - 새 파일 생성 - 좌측 파일 탐색기에서 새 파일(+.sol)을 만들고, 아래 HelloWorld.sol 코드를 복사하여 붙여 넣음
           - Solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HelloWorld {
    address public owner;

    constructor() {
        owner = msg.sender;
    }
}

      (2단계) 컴파일 및 바이트코드 확인
           - 컴파일러 탭 이동 - 좌측 메뉴에서 'Solidity Compiler' 탭(세 번째 아이콘)을 클릭
           - 자동 컴파일 (선택) - 'Auto compile' 옵션이 켜져 있다면 코드를 붙여 넣자마자 자동 컴파일이 진행, 켜져 있지 않다면 'Compile [파일명].sol' 버튼을 클릭하여 수동으로 컴파일
           - 컴파일 결과 확장 - 컴파일이 성공하면, 컴파일러 탭 하단의 'Compilation Details' 섹션이 활성화됨(이 섹션을 클릭하여 내용을 확장함)
           - 바이트코드 복사 - 확장된 내용 중에서 'Bytecode' 항목을 찾음
           - Bytecode 옆에 있는 클립보드 아이콘 (복사 버튼)을 클릭하면, 블록체인에 배포되는 실행 가능한 코드를 즉시 출력(복사)할 수 있음
           - 바이트코드 구성 요소 (선택적 참고)
                 ㄱ) Remix IDE에서 출력되는 바이트코드는 두 가지 구성 요소로 나뉨
                       - OBJECT : 실제 EVM이 실행하는 코드(이 부분이 최종적으로 블록체인에 저장됨)
                       - ABI(Application Binary Interface) : 코드가 아닌, 외부 애플리케이션(DApp)이 계약의 함수와 상호작용하는 방법을 
                                                                           정의한 JSON 형식의 인터페이스(바이트코드와 함께 가장 중요하게 사용되는 정보)



